[["week-8--principle-component-analyses.html", "9 Week 8- Principle Component Analyses 9.1 Download the data 9.2 Installing programs 9.3 Run pcangsd on our data 9.4 Setting up a new project in R 9.5 Reading data into R 9.6 Exercises", " 9 Week 8- Principle Component Analyses The lecture for this week focused on Plotting a PCA can be found here. In week 5 we mapped reads to a genome so we could call our genetic variants (SNPs) and generated bam files for each read file (= sequence data from an individual). Now that we know how to do some R basics we can use those SNPs to plot patterns of population structure via a principal component analysis. The first portion of this lesson will be performed in bash and then we will generate the plots in RStudio. 9.1 Download the data We first need to download the data. Use the link below to download it to jetstream, and then us the tar command to un-compress it. wget https://raw.githubusercontent.com/BayLab/MarineGenomicsData/main/week8_semester.tar.gz tar -xzvf week8_semester.tar.gz Our data this week consists of genotype_likelihood files in beagle format and a bam.filelist which contains id information for our samples. ls -lh MarineGenomicsData/Week8 9.2 Installing programs We will also need to install a few programs. The code below installs the program pcangsd, and a few dependencies for pcangsd: #install pip for python curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py #we need to add our home directory to the path for pip #look at path echo $PATH #add the location of pip to our path export PATH=&quot;$HOME/.local/bin:$PATH&quot; #then install pcangsd git clone https://github.com/Rosemeis/pcangsd.git cd pcangsd/ pip install --user -r requirements.txt #this installs additional requirements for pcangsd python3 setup.py build_ext --inplace Check that its installed correctly. #navigate to your home directory cd python3 pcangsd/pcangsd.py -h You should see the help menu for pcangsd. 9.3 Run pcangsd on our data python3 ../../pcangsd/pcangsd.py -beagle genolike_beagle.beagle.gz -o pca_out -threads 28 This will generate a covariance matrix output file. We can read this file into R and compute the eigenvectors and eigenvalues and make our plot. 9.4 Setting up a new project in R Well first open a new .R script to keep track of our code and everything that were doing. Be sure to comment heavily with #. It may seem obvious what were doing now, but you will forget what certain lines of code do in a surprisingly short amount of time. 9.5 Reading data into R There are several ways to read data in R. Useful functions include read.table(), getwd(), and setwd() R like many other programs is set to start in a specific directory, usually the desktop or home directory. You can check and see what directory R is set in with the command getwd() And of course all of this code is typed into our script and commented along the way. #check working directory #getwd() #should output #[1] &quot;/home/margeno&quot; Thus in jetstream the working directory is set to our home directory, which will work fine for uploading data. If you need to change the directory you can use setwd() and provide it with the full directory path (e.g., \"C:\") and then confirm that it moved the directory with getwd(). In Rstudio you can also use the pull down menus Session to get and set your working directory. Similarly, the tab Files in the lower right will also allow you to set your working directory. Now well read the data output by angsd into R using read.table() and as.matrix() cov&lt;-as.matrix(read.table(&quot;data/Week8_PCA/pca_out.cov&quot;)) ## Warning in file(file, &quot;rt&quot;): cannot open file &#39;data/Week8_PCA/pca_out.cov&#39;: No ## such file or directory ## Error in file(file, &quot;rt&quot;): cannot open the connection And then we can compute the eigenvalues from our covariance matrix with the function eigen. e&lt;-eigen(cov) ## Error in as.vector(x, mode): cannot coerce type &#39;closure&#39; to vector of type &#39;any&#39; And make a simple plot in base R plot(e$vectors[,1:2]) ## Error in plot(e$vectors[, 1:2]): object &#39;e&#39; not found We may be interested in how much of the variance our first two components explain. You can look at this in the e object under values. We divide the eigen values by the sum of all the values to get the percent explained by each value. e$values/sum(e$values) ## Error in eval(expr, envir, enclos): object &#39;e&#39; not found We now want to make the colors match population labels. The information for which population each individual sample came from is in the bam.filelist file. #read in the data names&lt;-read.table(&quot;bam.filelist&quot;) #assign the rownames of the covariance matix the rownames(cov)&lt;-names$V2 ## Error in `rownames&lt;-`(`*tmp*`, value = c(&quot;AK2&quot;, &quot;SEL&quot;, &quot;SEL&quot;, &quot;SEL&quot;, &quot;SEL&quot;, : attempt to set &#39;rownames&#39; on an object with no dimensions #remake the plot with the colors we want plot(e$vectors[,1:2], col=as.factor(rownames(cov)), pch=16) ## Error in plot(e$vectors[, 1:2], col = as.factor(rownames(cov)), pch = 16): object &#39;e&#39; not found There is another column in the bam.filelist file that will allow us to color the populations based on region. Go ahead and modify your plots to have nice x and y labels that state the percent variance explained by each axis, and that are colored by region. You can also change the pch and any other parameters you would like. 9.6 Exercises In R, upload the genotype likelihood maf file (genolike.beagle.maf.gz). Filter the data so that we only use sites for which all 15 individuals have data present (i.e., subsite by the nInd column). How many SNPs does this leave us? How many SNPs did we start with? Hint use the command read.table(gzfile(\"path/to/genotypelikelihoodfile/), header=T) to read in the file in R. Dont forget to assign it to an object or R will print the whole thing to the screen. Solution # read in the data #read in genotype likelihood data and filter by all individuals gen&lt;-read.table(gzfile(&quot;genolike_beagle.mafs.gz&quot;), header=T) #filter by nind == 15 gen_allIND&lt;-gen[gen$nInd==15,] #find how many SNPs we had in the first dataset dim(gen) ## [1] 282950 7 #[1] 282950 7 #how many do we have in the filtered dataset? dim(gen_allIND) ## [1] 31905 7 #[1] 31905 7 Use the filtered file from 01 in pcangsd to recalculate the covarianve matrix and regenerate the pca plot. How does it differ from the one we generated in class? Hint this will require you to merge the filtered data frame from exercise 1 with the beagle formated dataframe. Use the function merge(x, y, by = ), second hint, the function merge only works (properly) if the column names are the same. Change the column names to match across the two dataframes where they have the same info. Solution ## read in the beagle formatted data beag&lt;-read.table(gzfile(&quot;genolike_beagle.beagle.gz&quot;), header=T) #look at the column names between the two datasets colnames(gen) ## [1] &quot;chromo&quot; &quot;position&quot; &quot;major&quot; &quot;minor&quot; &quot;knownEM&quot; &quot;pK.EM&quot; &quot;nInd&quot; colnames(beag) ## [1] &quot;marker&quot; &quot;allele1&quot; &quot;allele2&quot; &quot;Ind0&quot; &quot;Ind0.1&quot; &quot;Ind0.2&quot; &quot;Ind1&quot; ## [8] &quot;Ind1.1&quot; &quot;Ind1.2&quot; &quot;Ind2&quot; &quot;Ind2.1&quot; &quot;Ind2.2&quot; &quot;Ind3&quot; &quot;Ind3.1&quot; ## [15] &quot;Ind3.2&quot; &quot;Ind4&quot; &quot;Ind4.1&quot; &quot;Ind4.2&quot; &quot;Ind5&quot; &quot;Ind5.1&quot; &quot;Ind5.2&quot; ## [22] &quot;Ind6&quot; &quot;Ind6.1&quot; &quot;Ind6.2&quot; &quot;Ind7&quot; &quot;Ind7.1&quot; &quot;Ind7.2&quot; &quot;Ind8&quot; ## [29] &quot;Ind8.1&quot; &quot;Ind8.2&quot; &quot;Ind9&quot; &quot;Ind9.1&quot; &quot;Ind9.2&quot; &quot;Ind10&quot; &quot;Ind10.1&quot; ## [36] &quot;Ind10.2&quot; &quot;Ind11&quot; &quot;Ind11.1&quot; &quot;Ind11.2&quot; &quot;Ind12&quot; &quot;Ind12.1&quot; &quot;Ind12.2&quot; ## [43] &quot;Ind13&quot; &quot;Ind13.1&quot; &quot;Ind13.2&quot; &quot;Ind14&quot; &quot;Ind14.1&quot; &quot;Ind14.2&quot; annoyingly the beagle formatted data merges the chromo and position columns of the maf dataframe two solutions: 1. we could split the columns in beag to match chromo and position 2. we merge the columns in gen to match the format in beag since we need the beagle format to run pcangsd lets do option 2. well use the paste() function to to this well make a new column in gen that is labeled marker to match the beagle column gen_allIND$marker&lt;-paste(gen_allIND$chromo, gen_allIND$position, sep=&quot;_&quot;) #then merge them by the marker column beag_allIND&lt;-merge(gen_allIND, beag, by=&quot;marker&quot;) #that should return a dataframe with 31905 rows and 55 columns #pcangsd doesn&#39;t want those extra columns that came from our merge #lets get rid of them to leave the 48 columns that beagle needs. #use colnames to see which ones we want colnames(beag_allIND) ## [1] &quot;marker&quot; &quot;chromo&quot; &quot;position&quot; &quot;major&quot; &quot;minor&quot; &quot;knownEM&quot; ## [7] &quot;pK.EM&quot; &quot;nInd&quot; &quot;allele1&quot; &quot;allele2&quot; &quot;Ind0&quot; &quot;Ind0.1&quot; ## [13] &quot;Ind0.2&quot; &quot;Ind1&quot; &quot;Ind1.1&quot; &quot;Ind1.2&quot; &quot;Ind2&quot; &quot;Ind2.1&quot; ## [19] &quot;Ind2.2&quot; &quot;Ind3&quot; &quot;Ind3.1&quot; &quot;Ind3.2&quot; &quot;Ind4&quot; &quot;Ind4.1&quot; ## [25] &quot;Ind4.2&quot; &quot;Ind5&quot; &quot;Ind5.1&quot; &quot;Ind5.2&quot; &quot;Ind6&quot; &quot;Ind6.1&quot; ## [31] &quot;Ind6.2&quot; &quot;Ind7&quot; &quot;Ind7.1&quot; &quot;Ind7.2&quot; &quot;Ind8&quot; &quot;Ind8.1&quot; ## [37] &quot;Ind8.2&quot; &quot;Ind9&quot; &quot;Ind9.1&quot; &quot;Ind9.2&quot; &quot;Ind10&quot; &quot;Ind10.1&quot; ## [43] &quot;Ind10.2&quot; &quot;Ind11&quot; &quot;Ind11.1&quot; &quot;Ind11.2&quot; &quot;Ind12&quot; &quot;Ind12.1&quot; ## [49] &quot;Ind12.2&quot; &quot;Ind13&quot; &quot;Ind13.1&quot; &quot;Ind13.2&quot; &quot;Ind14&quot; &quot;Ind14.1&quot; ## [55] &quot;Ind14.2&quot; #we want the first column and then columns 9-55 beag_allIND_final&lt;-beag_allIND[,c(1,9:55)] #now we have a dataframe with 31905 rows and 48 columns #let&#39;s write a table that we can use to run in pcangsd write.table(beag_allIND_final, &quot;geno_like_filt_allIND.beagle&quot;, sep=&quot;\\t&quot;, row.names = F) #by default write.table outputs a dataframe with row names we dont want that ### This writes a file to our Marine Genomics data directory. # pcangsd needs the file to be gzipped $ gzip geno_like_filt_allIND.beagle # and now we can run our pcangsd code $ python3 ../../pcangsd/pcangsd.py -beagle geno_like_filt_allIND.beagle.gz -o pca_out_allind -threads 28 and then we can go back to R and rerun our code to calculate the eigenvalues and eigenvectors for this covariance matrix. #read in the new covariance matrix cov_allind&lt;-as.matrix(read.table(&quot;pca_out_allind.cov&quot;)) ## Warning in file(file, &quot;rt&quot;): cannot open file &#39;pca_out_allind.cov&#39;: No such file ## or directory ## Error in file(file, &quot;rt&quot;): cannot open the connection #calculate eigenvalues e_allind&lt;-eigen(cov_allind) ## Error in as.matrix(x): object &#39;cov_allind&#39; not found #plot the data plot(e_allind$vectors[,1:2]) ## Error in plot(e_allind$vectors[, 1:2]): object &#39;e_allind&#39; not found #how much variance does our pc explain e_allind$values/sum(e_allind$values) ## Error in eval(expr, envir, enclos): object &#39;e_allind&#39; not found Remake the base R plot that we generated in class in ggplot. Use the group parameter in aes to group by region and/or population. Note, ggplot wants the data to be a dataframe and our data is a matrix. Use the function as.data.frame(e$vectors) to acheive this in the ggplot function. Dont forget to load the ggplot2 package with `library(ggplot2) Solution # we need to use the function as.data.frame to make our matrix a dataframe. M&lt;-as.data.frame(e_allind$vectors[,1:3]) ## Error in as.data.frame(e_allind$vectors[, 1:3]): object &#39;e_allind&#39; not found library(ggplot2) ## Warning: package &#39;ggplot2&#39; was built under R version 4.0.5 ggplot(data=M, aes(y=V1, x=V2, group=as.factor(names$V3), color=as.factor(names$V3)))+ geom_point()+ theme_classic()+ scale_color_manual(name=&quot;Region&quot;, labels = c(&quot;North&quot;, &quot;South&quot;), values = c(&quot;a&quot;=&quot;slateblue&quot;, &quot;b&quot;=&quot;green&quot;)) ## Error in ggplot(data = M, aes(y = V1, x = V2, group = as.factor(names$V3), : object &#39;M&#39; not found "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]

[["population-structure-via-construct.html", "13 Population Structure via conStruct 13.1 Download the data 13.2 update our compiler in bash/UNIX and install everything for R in the terminal (in bash/UNIX, NOT in Rstudio) 13.3 install conStruct in R 13.4 read in the data 13.5 Get our meta data read into R and ready to use 13.6 Run a structure analysis 13.7 Incoorporate geographic distances in a spatial model 13.8 Comparisons across different values of K 13.9 Exercises", " 13 Population Structure via conStruct For this week we will be exploring another way to document population genetic structure (the first way we covered was PCA in Week 8) via a Structure plot implemented in the R package conStruct. conStruct itself has a nice series of tutorials with example data that you can find here Well be using data from the Xuereb et al. paper on P. californicus. This data consists of a vcf file that is in structure format and contains SNP data (3699 SNPs) from 717 individuals (this is the same data we used for our PCA plot in week 9 for pcadapt, and for week 11 for GEA). The lecture for this week can be found here and describes the basics of a structure plot. 13.1 Download the data Well be using data from the Xuereb et al. paper on P. californicus. This data consists of a vcf file that is in structure format and contains SNP data (3699 SNPs) from 100 individuals (this is the same data we used for our PCA plot in week 9 for pcadapt, and for week 11 for GEA, just with fewer individuals for this week). Well download a metafile as well that has sample coordinates and names wget https://raw.githubusercontent.com/BayLab/MarineGenomicsData/main/week12_semester.tar.gz tar -xzvf week12_semester.tar.gz 13.2 update our compiler in bash/UNIX and install everything for R in the terminal (in bash/UNIX, NOT in Rstudio) We need to follow this guide here # first run this to get the compiliers sudo apt-get install -y libxml2-dev libcurl4-openssl-dev libssl-dev libv8-dev #Then install tidyverse into R from the terminal sudo R install.packages(&#39;tidyverse&#39;) # then exit R with q() and save your workspace image # now go back into R through the terminal and do the following sudo R remove.packages(&quot;rstan&quot;) if (file.exists(&quot;.RData&quot;)) file.remove(&quot;.RData&quot;) # now check that we have the compilers we need pkgbuild::has_build_tools(debug = TRUE) # if you see a &#39;TRUE&#39; then you can go on to the next step, installing rstan install.packages(&quot;rstan&quot;, repos = &quot;https://cloud.r-project.org/&quot;, dependencies = TRUE) 13.3 install conStruct in R Now that we have rstan installed we should be able to go into Rstudio and install conStruct (you could also stay in the terminal and run install.packages (\"conStruct) there if you want.) 13.4 read in the data This first step reads in our file which is in structure format and converts it to conStruct format (there are lots of file formats in population genetics, isnt it fun?) We need to make sure that we have the file coding right and this can be confirmed by looking at the structure file in bash to make sure that our samples start at the 3rd row and 3rd column and that our missing data is encoded as a -9. You can do the above by using wc -l to find the number of lines in the structure file. conStruct.data &lt;- structure2conStruct(infile=&quot;filtered_3699snps_100indcalifornicus.recode.strct_in&quot;, onerowperind = TRUE, start.loci = 3, start.samples = 3, missing.datum = -9, outfile = &quot;Construct_100inds&quot;) 13.5 Get our meta data read into R and ready to use This file contains the lat and lon of our samples as well as the site name and individual id. For conStruct we can make an object that contains the lat and lon and has the site name as the row names. #read in the data meta&lt;-read.table(&quot;californicus_metadata.csv&quot;, header=T, sep=&quot;,&quot;) #pull out the lat and lon and put it in a new matrix object sites&lt;-as.matrix(meta[-c(51:667), c(&quot;LAT&quot;, &quot;LONG&quot;)]) #assign row names that are the site id for each sample rownames(sites)&lt;-meta$SITE[-c(51:667)] 13.6 Run a structure analysis We now have our data read into conStruct and converted to conStruct format and our site information from the metadata in a matrix format. We can now run a structure analyses. For these analyses we chose a value of K (the number of clusters) and typically run the analyses for a range of K (2:7 for example). Well run K = 2 through K = 4 and then well do some model comparison to discuss whether one of these is better than the other. And well only run it with 1 chains and 10 iterations. This is simply so that the program runs quickly within our class time. For a real analysis youd want to run more than one chain (2-5) and iterations up to 1000. Its important to compare the different chains to ensure the analyses converges, as described here my.run &lt;- conStruct(spatial = FALSE, K = 1, freqs = conStruct.data, geoDist = NULL, coords = sites, prefix = &quot;Sea_cucu_K1&quot;, n.chains = 1, n.iter = 10, make.figs=F) my.run &lt;- conStruct(spatial = FALSE, K = 2, freqs = conStruct.data, geoDist = NULL, coords = sites, prefix = &quot;Sea_cucu_K2&quot;, n.chains = 1, n.iter = 10, make.figs=F) my.run &lt;- conStruct(spatial = FALSE, K = 3, freqs = conStruct.data, geoDist = NULL, coords = sites, prefix = &quot;Sea_cucu_K3&quot;, n.chains = 1, n.iter = 10, make.figs=F) my.run &lt;- conStruct(spatial = FALSE, K = 4, freqs = conStruct.data, geoDist = NULL, coords = sites, prefix = &quot;Sea_cucu_K4&quot;, n.chains = 1, n.iter = 10, make.figs=F) my.run &lt;- conStruct(spatial = FALSE, K = 5, freqs = conStruct.data, geoDist = NULL, coords = sites, prefix = &quot;Sea_cucu_K5&quot;, n.chains = 1, n.iter = 10, make.figs=F) This step produces several output files (a conStruct.results file and a data.block file) called after whatever you put in the prefix = section (sea_cucu_k2 in our case). We need to load that output file back into R to access all the things it produced. Lets just look at the first one for k = 2. #load the construct results file load(&quot;Sea_cucu_K3_conStruct.results.Robj&quot;) admix.props&lt;- conStruct.results$chain_1$MAP$admix.proportions #load the data block file load(&quot;Sea_cucu_K3_data.block.Robj&quot;) # make a structure plot make.structure.plot(admix.proportions = admix.props, sample.names=row.names(sites), mar = c(4,4,2,2)) #let&#39;s also make a pie chart make.admix.pie.plot(admix.proportions = admix.props, coords = sites, mar = c(4,4,2,2)) 13.7 Incoorporate geographic distances in a spatial model One of the main advantages of using conStruct is the ability to incorporate within the model measures of geographic distance. Lets do that for our K = 2 from above. First we need to calculate the geographic distance between our samples. There are many ways to do this, but well take a simple approach of calculating the euclidean (straight-line) distance between each site. #first install and then load the package geosphere #install.packages(&quot;geodist&quot;) library(&quot;geodist&quot;) #we&#39;ll use the function distm and the method distHaversine, which is the shortest distance between two points geo_dist&lt;-geodist(sites, measure=&quot;haversine&quot;) #now we can put the distance into our conStruct analyses my.run &lt;- conStruct(spatial = TRUE, K = 3, freqs = conStruct.data, geoDist = geo_dist, coords = sites, prefix = &quot;Sea_cucu_K3_dist&quot;, n.chains = 1, n.iter = 10, make.figs=T) ## ## SAMPLING FOR MODEL &#39;space_multiK&#39; NOW (CHAIN 1). ## Chain 1: ## Chain 1: Gradient evaluation took 0.011 seconds ## Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 110 seconds. ## Chain 1: Adjust your expectations accordingly! ## Chain 1: ## Chain 1: ## Chain 1: WARNING: No variance estimation is ## Chain 1: performed for num_warmup &lt; 20 ## Chain 1: ## Chain 1: Iteration: 1 / 10 [ 10%] (Warmup) ## Chain 1: Iteration: 2 / 10 [ 20%] (Warmup) ## Chain 1: Iteration: 3 / 10 [ 30%] (Warmup) ## Chain 1: Iteration: 4 / 10 [ 40%] (Warmup) ## Chain 1: Iteration: 5 / 10 [ 50%] (Warmup) ## Chain 1: Iteration: 6 / 10 [ 60%] (Sampling) ## Chain 1: Iteration: 7 / 10 [ 70%] (Sampling) ## Chain 1: Iteration: 8 / 10 [ 80%] (Sampling) ## Chain 1: Iteration: 9 / 10 [ 90%] (Sampling) ## Chain 1: Iteration: 10 / 10 [100%] (Sampling) ## Chain 1: ## Chain 1: Elapsed Time: 0.316 seconds (Warm-up) ## Chain 1: 6.336 seconds (Sampling) ## Chain 1: 6.652 seconds (Total) ## Chain 1: #remake our structure plots #load the construct results file load(&quot;Sea_cucu_K3_dist_conStruct.results.Robj&quot;) admix.props&lt;- conStruct.results$chain_1$MAP$admix.proportions #load the data block file load(&quot;Sea_cucu_K3_dist_data.block.Robj&quot;) # make a structure plot make.structure.plot(admix.proportions = admix.props, sample.names=row.names(sites), mar = c(4,4,2,2)) #and a pie chart make.admix.pie.plot(admix.proportions = admix.props, coords = sites, mar = c(4,4,2,2)) 13.8 Comparisons across different values of K You may want to show a single structure plot for one value of K and may want that one plot to be the best fitting model for your data. There are a few ways to do this, however most often theres not a single best model and care should be taken as models with more parameters often appear to be a better fit, but are not necessarily more biologically meaningful. The vignette here has several ways in which you can choose an optimal K or several K here 13.9 Exercises change the colors in the plot. THe default red and blue for K = 2 is not very friendly for those with color blindess. Using the command ?make.structure.plot determine how you would change the colors and then using this site choose color-blind-friendly colors. Make a strucutre plot for K = 2 and K = 4 using your new colors. Solution #first check how to do this ?make.structure.plot() ###### For K = 2 ############ #load the construct results file load(&quot;Sea_cucu_K2_conStruct.results.Robj&quot;) admix.props&lt;- conStruct.results$chain_1$MAP$admix.proportions #load the data block file load(&quot;Sea_cucu_K2_data.block.Robj&quot;) # make a structure plot make.structure.plot(admix.proportions = admix.props, layer.colors = c(&quot;#E69F00&quot;, &quot;#0072B2&quot;), mar = c(4,4,2,2)) ###### For K = 4 ############ #load the construct results file load(&quot;Sea_cucu_K4_conStruct.results.Robj&quot;) admix.props&lt;- conStruct.results$chain_1$MAP$admix.proportions #load the data block file load(&quot;Sea_cucu_K4_data.block.Robj&quot;) # make a structure plot make.structure.plot(admix.proportions = admix.props, layer.colors = c(&quot;#E69F00&quot;, &quot;#0072B2&quot;, &quot;#999999&quot;, &quot;#CC79A7&quot;), mar = c(4,4,2,2)) Make a pie-chart that overlays on a map. You will find a guide for doing this here Solution #first load your data load(&quot;Sea_cucu_K2_conStruct.results.Robj&quot;) admix.props&lt;- conStruct.results$chain_1$MAP$admix.proportions #load the data block file load(&quot;Sea_cucu_K2_data.block.Robj&quot;) # make the desired map maps::map(xlim = range(data.block$coords[,1]) + c(-5,5), ylim = range(data.block$coords[,2])+c(-2,2), col=&quot;gray&quot;) # add the admixture pie plot make.admix.pie.plot(admix.proportions = admix.props, coords = data.block$coords, add = TRUE) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]

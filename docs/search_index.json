[["index.html", "Chapter 1 Introduction to Marine Genomics Semester edition 1.1 Cloud computing versus individual laptops", " Chapter 1 Introduction to Marine Genomics Semester edition Welcome to Marine Genomics. This is a course on learning how to analyze genomic data for undergraduate and graduate students. We focused on marine organisms but these lessons can easily be applied to any taxa. We required that students have a background in biology and have completed the general biology series. Additionally, it is helpful if students have taken a course in Evolution, though this was not a requirement. We did not require any coding experience in R or Bash/UNIX. For most weeks, our course consists of one 75 min lecture and one 75 minute coding session per week. The lectures begin with a power point presentation where we introduce the weeks concept (for example, PCAs) and then are followed by a live coding demonstration carrier out by the instructor. The coding sessions provide an opportunity for the students to either repeat the same coding demonstration carried out during the lecture, or to extend the demonstration via coding exercises which we have written for each week and for which the solutions are available on our website (under each exercise). The first 5 weeks are primarily training in bash/UNIX and R basics and are structured as 2 lectures a week that are broken up with exercises for the students to practice each skill they are shown in live-coding demonstrations. The exercises typically take 5-15 minutes to complete. The remaining weeks are focused on performing a specific analysis (PCA, GWAS, Fst outlier analyses, etc). We provide all the data for the students to complete each weeks coding activities along with instructions for how to download the data. Additionally, the students found the website a phenomenally helpful resource. 1.1 Cloud computing versus individual laptops This course was designed to be carried out on the NSF funded Extreme Science and Engineering Discovery Environment (XSEDE) cloud computing resource Jetstream. Jetstream is a unique user-friendly cloud computing resource in that it provides the students with an environment with root privileges, making program installation less complicated. Jetstream also provides a Desktop simulator which allows students to transition between bash and R using the same exact directory paths as the instructor, reducing the confusion of students having unique file paths and providing a more streamlined approach to what for many students is their first coding class. Jetstream educational allocations can be applied for through XSEDE. The process of applying for a jetstream allocation for educational purposes is relatively straightforward and simply requires a course description, the number of students anticipated to participate, and a calculation of the computing resources required, and the instructors CV. Allocations are typically approved in two to three days and can be submitted ~2 weeks prior to the start of the course. Alternatively, these course materials can be used on students and instructors individual laptops. The file paths will need to be modified and we cannot guarantee that the installation of programs and R packages will proceed as they did on Jetstream. Thus, progam installation will need to be verified for each week by the instructor. "],["week-1--welcome.html", "Chapter 2 Week 1- Welcome! 2.1 Introduction to shell computing via the data carpentry tutorial 2.2 How to access the shell 2.3 Best practices for Jetstream 2.4 Week 1 Objectives 2.5 Navigating your file system 2.6 Shortcut: Tab Completion 2.7 Summary &amp; Key Points 2.8 Navigating Files and Directories 2.9 Moving around the file system 2.10 Navigating practice and finding hidden directories 2.11 Examining the contents of other directories 2.12 Full vs Relative Paths 2.13 Navigational shortcuts 2.14 Key Points 2.15 Creature of the Week!", " Chapter 2 Week 1- Welcome! Welcome to Marine Genomics Fall 2021 at Cal State LA! You will find the lecture for week one here 2.1 Introduction to shell computing via the data carpentry tutorial We will be following the data carpentry tutorial (Copyright 2016 @ Software Carpentry) Introduction to the command line for genomics. We have made some modifications to the data carpentry tutorial to fit our course. What is a shell and why should I care? A shell is a computer program that presents a command line interface which allows you to control your computer using commands entered with a keyboard instead of controlling graphical user interfaces (GUIs) with a mouse/keyboard combination. There are many reasons to learn about the shell: Many bioinformatics tools can only be used through a command line interface, or have extra capabilities in the command line version that are not available in the GUI. This is true, for example, of BLAST, which offers many advanced functions only accessible to users who know how to use a shell. The shell makes your work less boring. In bioinformatics you often need to do the same set of tasks with a large number of files. Learning the shell will allow you to automate those repetitive tasks and leave you free to do more exciting things. The shell makes your work less error-prone. When humans do the same thing a hundred different times (or even ten times), theyre likely to make a mistake. Your computer can do the same thing a thousand times with no mistakes. The shell makes your work more reproducible. When you carry out your work in the command-line (rather than a GUI), your computer keeps a record of every step that youve carried out, which you can use to re-do your work when you need to. It also gives you a way to communicate unambiguously what youve done, so that others can check your work or apply your process to new data. Many bioinformatic tasks require large amounts of computing power and cant realistically be run on your own machine. These tasks are best performed using remote computers or cloud computing, which can only be accessed through a shell. In this lesson you will learn how to use the command line interface to move around in your file system. 2.2 How to access the shell For this course we will be using the shell in our Jetstream allocation through xsede. Jetstream is a cloud computing resource for which we have been allocated resources for the purposes of this course. Below is a guide for accessing and using jetstream. In jetstream we launch what they call an instance which is a small allocation that specifies how much memory you need and reflects how much computing you might do (well guide you through this). Youll find the jetstream login here Navigate to the login with xsede tab in the upper right This will redirect you to the xsede login page. Your organization should say xsede. Click continue The username for our course is margeno. The password will be given out in class. If you missed it please contact Serena Caplins (sacaplins@ucdavis.edu) or Maddie Armstrong (mlarmstrong@ucdavis.edu) Once youve logged in you should be redirected to jetstream. You now need to create your own projects folder. This is where you will carry out all of your analyses for the course. Everyone will get one project folder. So please only make one. If you make a mistake you can delete it and start again. Once you have a project folder we can create our first instance. Go to the New tab and select instance. Select the RStudio Desktop Shiny Server instance Select a small instance size if it isnt already selected (should be the default). It will take several minutes (5-10) to build our instance. Once it says active it will take a few more minutes to deploy. Once its ready to go you should see several actions on the right side of the screen including report, suspend, stop, etc. Select open web desktop. You should see something like the little desktop above. Its not pretty but this is where well be spending a lot of time. Select the black box on the bottom menu bar to access the command line. It will open a new window that has the $ prompt. 2.3 Best practices for Jetstream Once you launch your instance and its active its ready to use. When youre done coding its best to close your jetstream desktop and projects folder browser window. If you are going to step away from jetstream for a while (say over the weekend), its best to Shelve or Suspend your instance. Once youre ready to code again you just have to select Resume to start your instance again. This will take a few minutes. If in doubt of whether you should shelve/suspend or keep active, its our recommendation to shelve/suspend your instance. This frees up resources for other users and should reduce the likelihood of your active instance freezing up and being inaccessible. If you get an error while trying to log in or open the web shell or web desktop, follow these tips: log out of the jetstream home page and log back in relaunch your instance reboot your instance If those options fail then it is likely best to delete the instance and relaunch a new instance. This will result in you losing your data or work, but that should not be terribly detrimental to the course as everything resets with new data each week. 2.4 Week 1 Objectives Questions to Answer: How can I perform operations on files outside of my working directory? What are some navigational shortcuts I can use to make my work more efficient? Main Tasks: Use a single command to navigate multiple steps in your directory structure, including moving backwards (one level up). Perform operations on files in directories outside your working directory. Work with hidden directories and hidden files. Interconvert between absolute and relative paths. Employ navigational shortcuts to move around your file system. 2.5 Navigating your file system The part of the operating system responsible for managing files and directories is called the file system. It organizes our data into files, which hold information, and directories (also called folders), which hold files or other directories. Several commands are frequently used to create, inspect, rename, and delete files and directories. $ The dollar sign is a prompt, which shows us that the shell is waiting for input; your shell may use a different character as a prompt and may add information before the prompt. When typing commands, either from these lessons or from other sources, do not type the prompt, only the commands that follow it. Lets find out where we are by running a command called pwd (which stands for print working directory). At any moment, our current working directory is our current default directory, i.e., the directory that the computer assumes we want to run commands in, unless we explicitly specify something else. Here, the computers response is /home/margeno, which is the top level directory within our cloud system: $ pwd /home/margeno Lets look at how our file system is organized. We can see what files and subdirectories are in this directory by running ls, which stands for listing: $ ls Desktop Documents Downloads Music Pictures Public Templates Videos ls prints the names of the files and directories in the current directory in alphabetical order, arranged neatly into columns. Well make a new subdirectory MarineGenomics where we will be creating new subdirectories, throughout this workshop. To make a new directory type the command mkdir followed by the name of the directory, in this case MarineGenomics. $ mkdir MarineGenomics Check that its there with ls $ ls Desktop Documents Downloads Music Pictures Public Templates Videos MarineGenomics The command to change locations in our file system is cd, followed by a directory name to change our working directory. cd stands for change directory. Lets say we want to navigate to the MarineGenomics directory we saw above. We can use the following command to get there: $ cd MarineGenomics $ pwd /home/margeno/MarineGenomics Use ls to see what is inside MarineGenomics $ ls It should be empty because we just created it and havent put anything in it yet. Lets download some data to work with. Well put it in our MarineGenomics directory. Lets first navigate back to our home directory. cd There are many ways to do transfer files and download data. We can use the command wget which needs a link to the file that we want to download. If theres a file saved on a website somewhere (anywhere on the internet) wget will download it for you. $ wget https://raw.githubusercontent.com/BayLab/MarineGenomicsData/main/week1.tar.gz We now need to untar that file so we can access the contents tar -xzvf week1.tar.gz Now that we have something in our MarineGenomics directory we can use the ls command a bit more. We can make the ls output more comprehensible by using the flag -F, which tells ls to add a trailing / to the names of directories: $ ls -F week1/ Great, its there! Lets cd into the data directory and then use ls to see whats in that directory. $ cd week1 $ ls -F Week1/ Anything with a / after it is a directory. Things with a * after them are programs. If there are no decorations, its a file. ls has lots of other options. To find out what they are, we can type: $ man ls man (short for manual) displays detailed documentation (also referred as man page or man file) for bash commands. It is a powerful resource to explore bash commands, understand their usage and flags. Some manual files are very long. You can scroll through the file using your keyboards down arrow or use the Space key to go forward one page and the b key to go backwards one page. When you are done reading, hit q to quit. Use the -l option for the ls command to display more information for each item in the directory. What is one piece of additional information this long format gives you that you dont see with the bare ls command? $ ls -l No one can possibly learn all of these arguments, thats what the manual page is for. You can (and should) refer to the manual page or other help files as needed. Lets go into the Week1 directory and see what is in there. $ cd week1 $ ls -F SRR6805880_1.fastq SRR6805880_2.fastq This directory contains two files with .fastq extensions. FASTQ is a format for storing information about sequencing reads and their quality. We will be learning more about FASTQ files in a later lesson. 2.6 Shortcut: Tab Completion Typing out file or directory names can waste a lot of time and its easy to make typing mistakes. Instead we can use tab complete as a shortcut. When you start typing out the name of a directory or file, then hit the Tab key, the shell will try to fill in the rest of the directory or file name. Return to your home directory: $ cd then enter $ cd Mar&lt;tab&gt; The shell will fill in the rest of the directory name for MarineGenomics. Now change directories to Week1 in data in MarineGenomics $ cd MarineGenomics $ cd data $ cd Week1 Using tab complete can be very helpful. However, it will only autocomplete a file or directory name if youve typed enough characters to provide a unique identifier for the file or directory you are trying to access. For example, if we now try to list the files which names start with SR by using tab complete: $ ls SR&lt;tab. The shell auto-completes your command to SRR6805880_, because all file names in the directory begin with this prefix. When you hit Tab again, the shell will list the possible choices. $ ls SRR68&lt;tab&gt;&lt;tab&gt; SRR6805880_1.fastq SRR6805880_2.fastq Tab completion can also fill in the names of programs, which can be useful if you remember the beginning of a program name. $ pw&lt;tab&gt;&lt;tab&gt; pwck pwconv pwd pwdx pwunconv Displays the name of every program that starts with pw. 2.7 Summary &amp; Key Points We now know how to move around our file system using the command line. This gives us an advantage over interacting with the file system through a GUI as it allows us to work on a remote server, carry out the same set of operations on a large number of files quickly, and opens up many opportunities for using bioinformatic software that is only available in command line versions. In the next few episodes, well be expanding on these skills and seeing how using the command line shell enables us to make our workflow more efficient and reproducible. The shell gives you the ability to work more efficiently by using keyboard commands rather than a GUI. Useful commands for navigating your file system include: ls, pwd, and cd. Most commands take options (flags) which begin with a -. Tab completion can reduce errors from mistyping and make work more efficient in the shell. 2.8 Navigating Files and Directories This continues the shell module from Data Carpentrys introduction to the shell, which can be found here https://datacarpentry.org/shell-genomics/02-the-filesystem/index.html 2.9 Moving around the file system Weve learned how to use pwd to find our current location within our file system. Weve also learned how to use cd to change locations and ls to list the contents of a directory. Now were going to learn some additional commands for moving around within our file system. Use the commands weve learned so far to navigate to the MarineGenomics/data/Week1 directory, if youre not already there. $ cd $ cd MarineGenomics $ cd Week1 What if we want to move back up and out of this directory and to our top level directory? Can we type cd MarineGenomics? Try it and see what happens. $ cd MarineGenomics -bash: cd: MarineGenomics: No such file or directory Your computer looked for a directory or file called MarineGenomics within the directory you were already in. It didnt know you wanted to look at a directory level above the one you were located in. We have a special command to tell the computer to move us back or up one directory level. $ cd .. Now we can use pwd to make sure that we are in the directory we intended to navigate to, and ls to check that the contents of the directory are correct. $ pwd home/margeno/MarineGenomics $ ls data From this output, we can see that .. did indeed take us back one level in our file system. You can chain these together like so: $ ls ../../ prints the contents of /home. 2.10 Navigating practice and finding hidden directories Go back to your home directory. From there list the contents of the home directory. There are hidden directories in our home directory. Explore the options for ls to find out how to see hidden directories. List the contents of the directory and identify the name of the text file in that directory. Hint: hidden files and folders in Unix start with ., for example .my_hidden_directory Solution $ cd Lets look at some of the options for the ls function using the man command (note this will print out several lines of text) $ man ls The -a option is short for all and says that it causes ls to not ignore entries starting with . This is the option we want. $ ls -a . .ICEauthority .Rhistory .ansible .bash_logout .cache .dbus .fontconfig .local .r .ssh .wget-hsts Desktop Downloads Pictures Templates .. .Renviron .Xauthority .bash_history .bashrc .config .emacs.d .gnupg .profile .rstudio-desktop .vnc .xsession-errors Documents Music Public Videos Youll see there are many more files shown now that we can look at the hidden ones. In most commands the flags can be combined together in no particular order to obtain the desired results/output. $ ls -Fa $ ls -laF 2.11 Examining the contents of other directories By default, the ls commands lists the contents of the working directory (i.e. the directory you are in). You can always find the directory you are in using the pwd command. However, you can also give ls the names of other directories to view. Navigate to your home directory if you are not already there. $ cd Then enter the command: $ ls MarineGenomics data This will list the contents of the MarineGenomics directory without you needing to navigate there. The cd command works in a similar way. Try entering: $ cd $ cd MarineGenomics/week1 This will take you to the MarineGenomics directory without having to go through the intermediate directory. Navigating practice Navigate to your home directory. From there, list the contents of the Week1 directory. $ cd $ ls MarineGenomics/Week1 SRR6805880_1.fastq SRR6805880_2.fastq 2.12 Full vs Relative Paths The cd command takes an argument which is a directory name. Directories can be specified using either a relative path or a full absolute path. The directories on the computer are arranged into a hierarchy. The full path tells you where a directory is in that hierarchy. Navigate to the home directory, then enter the pwd command. $ cd $ pwd You should see: /home/margeno This is the full name of your home directory. This tells you that you are in a directory called margeno, which sits inside a directory called home which sits inside the very top directory in the hierarchy. The very top of the hierarchy is a directory called / which is usually referred to as the root directory. So, to summarize: margeno is a directory in home which is a directory in /. More on root and home in the next section. Now enter the following command: $ cd /home/margeno/MarineGenomics/Week1 This jumps several levels to the Week1 directory. Now go back to the home directory. $ cd You can also navigate to the Week1 directory using: $ cd MarineGenomics/Week1 These two commands have the same effect, they both take us to the Week1 directory. The first uses the absolute path, giving the full address from the home directory. The second uses a relative path, giving only the address from the working directory. A full path always starts with a /. A relative path does not. A relative path is like getting directions from someone on the street. They tell you to go right at the stop sign, and then turn left on Main Street. That works great if youre standing there together, but not so well if youre trying to tell someone how to get there from another country. A full path is like GPS coordinates. It tells you exactly where something is no matter where you are right now. You can usually use either a full path or a relative path depending on what is most convenient. If we are in the home directory, it is more convenient to enter the full path. If we are in the working directory, it is more convenient to enter the relative path since it involves less typing. Over time, it will become easier for you to keep a mental note of the structure of the directories that you are using and how to quickly navigate amongst them. 2.13 Navigational shortcuts The root directory is the highest level directory in your file system and contains files that are important for your computer to perform its daily work. While you will be using the root (/) at the beginning of your absolute paths, it is important that you avoid working with data in these higher-level directories, as your commands can permanently alter files that the operating system needs to function. In many cases, trying to run commands in root directories will require special permissions which will be discussed later, so its best to avoid them and work within your home directory. Dealing with the home directory is very common. The tilde character, ~, is a shortcut for your home directory. In our case, the root directory is two levels above our home directory, so cd or cd ~ will take you to /home/margeno and cd / will take you to /. Navigate to the MarineGenomics directory: $ cd $ cd MarineGenomics Then enter the command: $ ls ~ Desktop Documents Downloads Music Pictures Public Templates Videos MarineGenomics This prints the contents of your home directory, without you needing to type the full path. The commands cd, and cd ~ are very useful for quickly navigating back to your home directory. We will be using the ~ character in later lessons to specify our home directory. 2.14 Key Points The /, ~, and .. characters represent important navigational shortcuts. Hidden files and directories start with . and can be viewed using ls -a. Relative paths specify a location starting from the current location, while absolute paths specify a location from the root of the file system. 2.15 Creature of the Week! Spirula spirula! "],["week-2-working-with-files.html", "Chapter 3 Week 2: Working With Files 3.1 Our data set: FASTQ files 3.2 Wildcards 3.3 Exercise 3.4 Using echo 3.5 Command History 3.6 Examining Files 3.7 Exercise 3.8 Exercise 3.9 Details on the FASTQ format 3.10 Creating, moving, copying, and removing 3.11 File Permissions 3.12 Removing 3.13 Exercise 3.14 Redirections 3.15 Searching files 3.16 Exercise 3.17 Redirecting output 3.18 Writing for loops 3.19 Using Basename in for loops 3.20 Exercise 3.21 Exercise 3.22 Writing Scripts and Working with Data 3.23 Writing files 3.24 Exercise 3.25 Writing scripts 3.26 Exercise 3.27 Making the script into a program 3.28 Creature of the Week!", " Chapter 3 Week 2: Working With Files Before we start, make sure to clone or update the github folder MarineGenomics in the user directory cd /home/margeno/ wget https://raw.githubusercontent.com/BayLab/MarineGenomicsData/main/week2.tar.gz use tar to uncompress and unzip the file tar -xzvf week2.tar.gz Questions: How can I view and search file contents? How can I create, copy and delete files and directories? How can I control who has permission to modify a file? How can I repeat recently used commands? Objectives: View, search within, copy, move, and rename files. Create new directories. Use wildcards (*) to perform operations on multiple files. Make a file read only. Use the history command to view and repeat recently used commands. Keypoints: You can view file contents using less, cat, head or tail. The commands cp, mv, and mkdir are useful for manipulating existing files and creating new directories. You can view file permissions using ls -l and change permissions using chmod. The history command and the up arrow on your keyboard can be used to repeat recently used commands. 3.1 Our data set: FASTQ files Now that we know how to navigate around our directory structure, lets start working with our sequencing files. We did a sequencing experiment and have two results files, which are stored in our untrimmed_fastq directory. 3.2 Wildcards Navigate to your untrimmed_fastq directory: $ cd ~/MarineGenomics/Week2/untrimmed_fastq We are interested in looking at the FASTQ files in this directory. We can list all files with the .fastq extension using the command: $ ls *.fastq SRR097977.fastq SRR098026.fastq The * character is a special type of character called a wildcard, which can be used to represent any number of any type of character. Thus, *.fastq matches every file that ends with .fastq. This command: $ ls *977.fastq SRR097977.fastq lists only the file that ends with 977.fastq. This command: $ ls /usr/bin/*.sh /usr/bin/gettext.sh /usr/bin/rescan-scsi-bus.sh Lists every file in /usr/bin that ends in the characters .sh. Note that the output displays full paths to files, since each result starts with /. 3.3 Exercise Do each of the following tasks from your current directory using a single ls command for each: List all of the files in /usr/bin that start with the letter c. List all of the files in /usr/bin that contain the letter a. List all of the files in /usr/bin that end with the letter o. Bonus: List all of the files in /usr/bin that contain the letter a or the letter c. Hint: The bonus question requires a Unix wildcard that we havent talked about yet. Try searching the internet for information about Unix wildcards to find what you need to solve the bonus problem. Solution ls /usr/bin/c* ls /usr/bin/*a* ls /usr/bin/*o Bonus: ls /usr/bin/*[ac]* 3.4 Using echo echo is a built-in shell command that writes its arguments, like a line of text to standard output. The echo command can also be used with pattern matching characters, such as wildcard characters. Here we will use the echo command to see how the wildcard character is interpreted by the shell. $ echo *.fastq SRR097977.fastq SRR098026.fastq The * is expanded to include any file that ends with .fastq. We can see that the output of echo *.fastq is the same as that of ls *.fastq. What would the output look like if the wildcard could not be matched? Compare the outputs of echo *.missing and ls *.missing. Solution $ echo *.missing *.missing $ ls *.missing ls: cannot access &#39;*.missing&#39;: No such file or directory 3.5 Command History If you want to repeat a command that youve run recently, you can access previous commands using the up arrow on your keyboard to go back to the most recent command. Likewise, the down arrow takes you forward in the command history. A few more useful shortcuts: Ctrl+C will cancel the command you are writing, and give you a fresh prompt. Ctrl+R will do a reverse-search through your command history. This is very useful. Ctrl+L or the clear command will clear your screen. You can also review your recent commands with the history command, by entering: $ history to see a numbered list of recent commands. You can reuse one of these commands directly by referring to the number of that command. For example, if your history looked like this: 259 ls * 260 ls /usr/bin/*.sh 261 ls *R1*fastq then you could repeat command #260 by entering: $ !260 Type ! (exclamation point) and then the number of the command from your history. You will be glad you learned this when you need to re-run very complicated commands. For more information on advanced usage of history, read section 9.3 of Bash manual. You can also do this with Ctrl+R and a search for ls which may be more of less usefull depending on how often you use the command ls 3.6 Examining Files We now know how to switch directories, run programs, and look at the contents of directories, but how do we look at the contents of files? One way to examine a file is to print out all of the contents using the program cat. Enter the following command from within the untrimmed_fastq directory: $ cat SRR098026.fastq This will print out all of the contents of the SRR098026.fastq to the screen. 3.7 Exercise Print out the contents of the ~/MarineGenomics/week2/untrimmed_fastq/SRR097977.fastq file. What is the last line of the file? From your home directory, and without changing directories, use one short command to print the contents of all of the files in the ./MarineGenomics/Week2/untrimmed_fastq directory. Solution The last line of the file is C:CCC::CCCCCCCC&lt;8?6A:C28C&lt;608'&amp;&amp;&amp;,'$. cat ./data_week2/Week2/data_week2/untrimmed_fastq/* cat is a terrific program, but when the file is really big, it can be annoying to use. The program, less, is useful for this case. less opens the file as read only, and lets you navigate through it. The navigation commands are identical to the man program. Enter the following command: $ less SRR097977.fastq Some navigation commands in less: key action Space to go forward b to go backward g to go to the beginning G to go to the end q to quit less also gives you a way of searching through files. Use the / key to begin a search. Enter the word you would like to search for and press enter. The screen will jump to the next location where that word is found. Shortcut: If you hit / then enter, less will repeat the previous search. less searches from the current location and works its way forward. Scroll up a couple lines on your terminal to verify you are at the beginning of the file. Note, if you are at the end of the file and search for the sequence CAA, less will not find it. You either need to go to the beginning of the file (by typing g) and search again using / or you can use ? to search backwards in the same way you used / previously. For instance, lets search forward for the sequence TTTTT in our file. You can see that we go right to that sequence, what it looks like, and where it is in the file. If you continue to type / and hit return, you will move forward to the next instance of this sequence motif. If you instead type ? and hit return, you will search backwards and move up the file to previous examples of this motif. 3.8 Exercise What are the next three nucleotides (characters) after the first instance of the sequence quoted above? Solution CAC Remember, the man program actually uses less internally and therefore uses the same commands, so you can search documentation using / as well! Theres another way that we can look at files, and in this case, just look at part of them. This can be particularly useful if we just want to see the beginning or end of the file, or see how its formatted. The commands are head and tail and they let you look at the beginning and end of a file, respectively. $ head SRR098026.fastq @SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35 NNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNN +SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35 !!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!! @SRR098026.2 HWUSI-EAS1599_1:2:1:0:312 length=35 NNNNNNNNNNNNNNNNANNNNNNNNNNNNNNNNNN +SRR098026.2 HWUSI-EAS1599_1:2:1:0:312 length=35 !!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!! @SRR098026.3 HWUSI-EAS1599_1:2:1:0:570 length=35 NNNNNNNNNNNNNNNNANNNNNNNNNNNNNNNNNN $ tail SRR098026.fastq +SRR098026.247 HWUSI-EAS1599_1:2:1:2:1311 length=35 #!##!#################!!!!!!!###### @SRR098026.248 HWUSI-EAS1599_1:2:1:2:118 length=35 GNTGNGGTCATCATACGCGCCCNNNNNNNGGCATG +SRR098026.248 HWUSI-EAS1599_1:2:1:2:118 length=35 B!;?!A=5922:##########!!!!!!!###### @SRR098026.249 HWUSI-EAS1599_1:2:1:2:1057 length=35 CNCTNTATGCGTACGGCAGTGANNNNNNNGGAGAT +SRR098026.249 HWUSI-EAS1599_1:2:1:2:1057 length=35 A!@B!BBB@ABAB#########!!!!!!!###### The -n option to either of these commands can be used to print the first or last n lines of a file. $ head -n 1 SRR098026.fastq @SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35 $ tail -n 1 SRR098026.fastq A!@B!BBB@ABAB#########!!!!!!!###### 3.9 Details on the FASTQ format Although it looks complicated (and it is), its easy to understand the fastq format with a little decoding. Some rules about the format include Line Description 1 Always begins with @ and then information about the read 2 The actual DNA sequence 3 Always begins with a + and sometimes the same info in line 1 4 Has a string of characters which represent the quality scores; must have same number of characters as line 2 We can view the first complete read in one of the files in our dataset by using head to look at the first four lines. $ head -n 4 SRR098026.fastq @SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35 NNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNN +SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35 !!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!! All but one of the nucleotides in this read are unknown (N). This is a pretty bad read! Line 4 shows the quality for each nucleotide in the read. Quality is interpreted as the probability of an incorrect base call (e.g. 1 in 10) or, equivalently, the base call accuracy (e.g. 90%). To make it possible to line up each individual nucleotide with its quality score, the numerical score is converted into a code where each individual character represents the numerical quality score for an individual nucleotide. For example, in the line above, the quality score line is: !!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!! The # character and each of the ! characters represent the encoded quality for an individual nucleotide. The numerical value assigned to each of these characters depends on the sequencing platform that generated the reads. The sequencing machine used to generate our data uses the standard Sanger quality PHRED score encoding, Illumina version 1.8 onwards. Here is a link showing what those different symbols mean for quality scores: https://support.illumina.com/help/BaseSpace_OLH_009008/Content/Source/Informatics/BS/QualityScoreEncoding_swBS.htm Each character is assigned a quality score between 0 and 42 as shown in the chart below. Quality encoding: !&quot;#$%&amp;&#39;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJK | | | | | Quality score: 0........10........20........30........40.. Each quality score represents the probability that the corresponding nucleotide call is incorrect. This quality score is logarithmically based, so a quality score of 10 reflects a base call accuracy of 90%, but a quality score of 20 reflects a base call accuracy of 99%. These probability values are the results from the base calling algorithm and dependent on how much signal was captured for the base incorporation. Looking back at our read: @SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35 NNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNN +SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35 !!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!! we can now see that the quality of each of the Ns is 0 and the quality of the only nucleotide call (C) is also very poor (# = a quality score of 2). This is indeed a very bad read. 3.10 Creating, moving, copying, and removing Now we can move around in the file structure, look at files, and search files. But what if we want to copy files or move them around or get rid of them? Most of the time, you can do these sorts of file manipulations without the command line, but there will be some cases (like when youre working with a remote computer like we are for this lesson) where it will be impossible. Youll also find that you may be working with hundreds of files and want to do similar manipulations to all of those files. In cases like this, its much faster to do these operations at the command line. 3.10.1 Copying Files When working with computational data, its important to keep a safe copy of that data that cant be accidentally overwritten or deleted. For this lesson, our raw data is our FASTQ files. We dont want to accidentally change the original files, so well make a copy of them and change the file permissions so that we can read from, but not write to, the files. First, lets make a copy of one of our FASTQ files using the cp command. Navigate to the ~/MarineGenomics/week2/untrimmed_fastq directory and enter: $ cp SRR098026.fastq SRR098026-copy.fastq $ ls -F SRR097977.fastq SRR098026-copy.fastq SRR098026.fastq We now have two copies of the SRR098026.fastq file, one of them named SRR098026-copy.fastq. Well move this file to a new directory called backup where well store our backup data files. 3.10.2 Creating Directories The mkdir command is used to make a directory. Enter mkdir followed by a space, then the directory name you want to create: $ mkdir backup 3.10.3 Moving / Renaming We can now move our backup file to this directory. We can move files around using the command mv: $ mv SRR098026-copy.fastq backup $ ls backup SRR098026-copy.fastq The mv command is also how you rename files. Lets rename this file to make it clear that this is a backup: $ cd backup $ mv SRR098026-copy.fastq SRR098026-backup.fastq $ ls SRR098026-backup.fastq 3.11 File Permissions Weve now made a backup copy of our file, but just because we have two copies, it doesnt make us safe. We can still accidentally delete or overwrite both copies. To make sure we cant accidentally mess up this backup file, were going to change the permissions on the file so that were only allowed to read (i.e. view) the file, not write to it (i.e. make new changes). View the current permissions on a file using the -l (long) flag for the ls command: $ ls -l -rw-rw-r-- 1 margeno margeno 43K Apr 6 12:15 SRR098026-backup.fastq The first part of the output for the -l flag gives you information about the files current permissions. There are ten slots in the permissions list. The first character in this list is related to file type, not permissions, so well ignore it for now. The next three characters relate to the permissions that the file owner has, the next three relate to the permissions for group members, and the final three characters specify what other users outside of your group can do with the file. Were going to concentrate on the three positions that deal with your permissions (as the file owner). Permissions breakdown Here the three positions that relate to the file owner are rw-. The r means that you have permission to read the file, the w indicates that you have permission to write to (i.e. make changes to) the file, and the third position is a -, indicating that you dont have permission to carry out the ability encoded by that space (this is the space where x or executable ability is stored, well talk more about this in a later lesson). Our goal for now is to change permissions on this file so that you no longer have w or write permissions. We can do this using the chmod (change mode) command and subtracting (-) the write permission -w. $ chmod -w SRR098026-backup.fastq $ ls -l -r--r--r-- 1 dcuser dcuser 43332 Nov 15 23:02 SRR098026-backup.fastq Chmod can also change the permission to only the user (u), group (g), and/or other (o). Lets add reading (r), writing (x), and execute (x) permissions to user group. $ chmod u=rwx SRR098026-backup.fastq $ ls -l 3.12 Removing To prove to ourselves that you no longer have the ability to modify this file, try deleting it with the rm command: $ rm SRR098026-backup.fastq Youll be asked if you want to override your file permissions: rm: remove write-protected regular file SRR098026-backup.fastq? You should enter n for no. If you enter n (for no), the file will not be deleted. If you enter y, you will delete the file. This gives us an extra measure of security, as there is one more step between us and deleting our data files. Important: The rm command permanently removes the file. Be careful with this command. It doesnt just nicely put the files in the Trash. Theyre really gone. By default, rm will not delete directories. You can tell rm to delete a directory using the -r (recursive) option. Lets delete the backup directory we just made. Enter the following command: $ cd .. $ rm -r backup This will delete not only the directory, but all files within the directory. If you have write-protected files in the directory, you will be asked whether you want to override your permission settings. 3.13 Exercise Starting in the ~/MarineGenomics/Week2/untrimmed_fastq/ directory, do the following: 1. Make sure that you have deleted your backup directory and all files it contains. 2. Create a backup of each of your FASTQ files using cp. (Note: Youll need to do this individually for each of the two FASTQ files. We havent learned yet how to do this with a wildcard.) 3. Use a wildcard to move all of your backup files to a new backup directory. 4. Change the permissions on all of your backup files to be write-protected. Solution rm -r backup cp SRR098026.fastq SRR098026-backup.fastq and cp SRR097977.fastq SRR097977-backup.fastq mkdir backup and mv *-backup.fastq backup chmod -w backup/*-backup.fastq Its always a good idea to check your work with ls -l backup. You should see something like: -r--r--r-- 1 dcuser dcuser 47552 Nov 15 23:06 SRR097977-backup.fastq -r--r--r-- 1 dcuser dcuser 43332 Nov 15 23:06 SRR098026-backup.fastq 3.14 Redirections Questions: How can I search within files? How can I combine existing commands to do new things? Objectives: Employ the grep command to search for information within files. Print the results of a command to a file. Construct command pipelines with two or more stages. Use for loops to run the same command for several input files. Keypoints: grep is a powerful search tool with many options for customization. &gt;, &gt;&gt;, and | are different ways of redirecting output. command &gt; file redirects a commands output to a file. command &gt;&gt; file redirects a commands output to a file without overwriting the existing contents of the file. command_1 | command_2 redirects the output of the first command as input to the second command. for loops are used for iteration. basename gets rid of repetitive parts of names. 3.15 Searching files We discussed in a previous episode how to search within a file using less. We can also search within files without even opening them, using grep. grep is a command-line utility for searching plain-text files for lines matching a specific set of characters (sometimes called a string) or a particular pattern (which can be specified using something called regular expressions). Were not going to work with regular expressions in this lesson, and are instead going to specify the strings we are searching for. Lets give it a try! Nucleotide abbreviations The four nucleotides that appear in DNA are abbreviated A, C, T and G. Unknown nucleotides are represented with the letter N. An N appearing in a sequencing file represents a position where the sequencing machine was not able to confidently determine the nucleotide in that position. You can think of an N as being aNy nucleotide at that position in the DNA sequence. Well search for strings inside of our fastq files. Lets first make sure we are in the correct directory: $ cd ~/MarineGenomics/Week2/untrimmed_fastq Suppose we want to see how many reads in our file have really bad segments containing 10 consecutive unknown nucleotides (Ns). Determining quality In this lesson, were going to be manually searching for strings of Ns within our sequence results to illustrate some principles of file searching. It can be really useful to do this type of searching to get a feel for the quality of your sequencing results, however, in your research you will most likely use a bioinformatics tool that has a built-in program for filtering out low-quality reads. Youll learn how to use one such tool in a later lesson. Lets search for the string NNNNNNNNNN in the SRR098026 file: $ grep NNNNNNNNNN SRR098026.fastq This command returns a lot of output to the terminal. Every single line in the SRR098026 file that contains at least 10 consecutive Ns is printed to the terminal, regardless of how long or short the file is. We may be interested not only in the actual sequence which contains this string, but in the name (or identifier) of that sequence. We discussed in a previous lesson that the identifier line immediately precedes the nucleotide sequence for each read in a FASTQ file. We may also want to inspect the quality scores associated with each of these reads. To get all of this information, we will return the line immediately before each match and the two lines immediately after each match. We can use the -B argument for grep to return a specific number of lines before each match. The -A argument returns a specific number of lines after each matching line. Here we want the line before and the two lines after each matching line, so we add -B1 -A2 to our grep command: $ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq One of the sets of lines returned by this command is: @SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35 CNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN +SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35 #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 3.16 Exercise Search for the sequence GNATNACCACTTCC in the SRR098026.fastq file. Have your search return all matching lines and the name (or identifier) for each sequence that contains a match. Search for the sequence AAGTT in both FASTQ files. Have your search return all matching lines and the name (or identifier) for each sequence that contains a match. Solution grep -B1 GNATNACCACTTCC SRR098026.fastq @SRR098026.245 HWUSI-EAS1599_1:2:1:2:801 length=35 GNATNACCACTTCCAGTGCTGANNNNNNNGGGATG grep -B1 AAGTT *.fastq SRR097977.fastq-@SRR097977.11 209DTAAXX_Lenski2_1_7:8:3:247:351 length=36 SRR097977.fastq:GATTGCTTTAATGAAAAAGTCATATAAGTTGCCATG -- SRR097977.fastq-@SRR097977.67 209DTAAXX_Lenski2_1_7:8:3:544:566 length=36 SRR097977.fastq:TTGTCCACGCTTTTCTATGTAAAGTTTATTTGCTTT -- SRR097977.fastq-@SRR097977.68 209DTAAXX_Lenski2_1_7:8:3:724:110 length=36 SRR097977.fastq:TGAAGCCTGCTTTTTTATACTAAGTTTGCATTATAA -- SRR097977.fastq-@SRR097977.80 209DTAAXX_Lenski2_1_7:8:3:258:281 length=36 SRR097977.fastq:GTGGCGCTGCTGCATAAGTTGGGTTATCAGGTCGTT -- SRR097977.fastq-@SRR097977.92 209DTAAXX_Lenski2_1_7:8:3:353:318 length=36 SRR097977.fastq:GGCAAAATGGTCCTCCAGCCAGGCCAGAAGCAAGTT -- SRR097977.fastq-@SRR097977.139 209DTAAXX_Lenski2_1_7:8:3:703:655 length=36 SRR097977.fastq:TTTATTTGTAAAGTTTTGTTGAAATAAGGGTTGTAA -- SRR097977.fastq-@SRR097977.238 209DTAAXX_Lenski2_1_7:8:3:592:919 length=36 SRR097977.fastq:TTCTTACCATCCTGAAGTTTTTTCATCTTCCCTGAT -- SRR098026.fastq-@SRR098026.158 HWUSI-EAS1599_1:2:1:1:1505 length=35 SRR098026.fastq:GNNNNNNNNCAAAGTTGATCNNNNNNNNNTGTGCG 3.17 Redirecting output grep allowed us to identify sequences in our FASTQ files that match a particular pattern. All of these sequences were printed to our terminal screen, but in order to work with these sequences and perform other operations on them, we will need to capture that output in some way. We can do this with something called redirection. The idea is that we are taking what would ordinarily be printed to the terminal screen and redirecting it to another location. In our case, we want to print this information to a file so that we can look at it later and use other commands to analyze this data. The command for redirecting output to a file is &gt;. Lets try out this command and copy all the records (including all four lines of each record) in our FASTQ files that contain NNNNNNNNNN to another file called bad_reads.txt. $ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq &gt; bad_reads.txt File extensions You might be confused about why were naming our output file with a .txt extension. After all, it will be holding FASTQ formatted data that were extracting from our FASTQ files. Wont it also be a FASTQ file? The answer is, yes - it will be a FASTQ file and it would make sense to name it with a .fastq extension. However, using a .fastq extension will lead us to problems when we move to using wildcards later in this episode. Well point out where this becomes important. For now, its good that youre thinking about file extensions! The prompt should sit there a little bit, and then it should look like nothing happened. But type ls. You should see a new file called bad_reads.txt. We can check the number of lines in our new file using a command called wc. wc stands for word count. This command counts the number of words, lines, and characters in a file. The FASTQ file may change over time, so given the potential for updates, make sure your file matches your instructors output. As of Sept. 2020, wc gives the following output: $ wc bad_reads.txt 537 1073 23217 bad_reads.txt This will tell us the number of lines, words and characters in the file. If we want only the number of lines, we can use the -l flag for lines. $ wc -l bad_reads.txt 537 bad_reads.txt 3.17.1 Exercise How many sequences are there in SRR098026.fastq? Remember that every sequence is formed by four lines. Solution $ wc -l SRR098026.fastq 996 Now you can divide this number by four to get the number of sequences in your fastq file We might want to search multiple FASTQ files for sequences that match our search pattern. However, we need to be careful, because each time we use the &gt; command to redirect output to a file, the new output will replace the output that was already present in the file. This is called overwriting and, just like you dont want to overwrite your video recording of your kids first birthday party, you also want to avoid overwriting your data files. $ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq &gt; bad_reads.txt $ wc -l bad_reads.txt 537 bad_reads.txt $ grep -B1 -A2 NNNNNNNNNN SRR097977.fastq &gt; bad_reads.txt $ wc -l bad_reads.txt 0 bad_reads.txt Here, the output of our second call to wc shows that we no longer have any lines in our bad_reads.txt file. This is because the second file we searched (SRR097977.fastq) does not contain any lines that match our search sequence. So our file was overwritten and is now empty. We can avoid overwriting our files by using the command &gt;&gt;. &gt;&gt; is known as the append redirect and will append new output to the end of a file, rather than overwriting it. $ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq &gt; bad_reads.txt $ wc -l bad_reads.txt 537 bad_reads.txt $ grep -B1 -A2 NNNNNNNNNN SRR097977.fastq &gt;&gt; bad_reads.txt $ wc -l bad_reads.txt 537 bad_reads.txt The output of our second call to wc shows that we have not overwritten our original data. We can also do this with a single line of code by using a wildcard: $ grep -B1 -A2 NNNNNNNNNN *.fastq &gt; bad_reads.txt $ wc -l bad_reads.txt 537 bad_reads.txt File extensions - part 2 This is where we would have trouble if we were naming our output file with a .fastq extension. If we already had a file called bad_reads.fastq (from our previous grep practice) and then ran the command above using a .fastq extension instead of a .txt extension, grep would give us a warning. grep -B1 -A2 NNNNNNNNNN *.fastq &gt; bad_reads.fastq grep: input file bad_reads.fastq is also the output grep is letting you know that the output file bad_reads.fastq is also included in your grep call because it matches the *.fastq pattern. Be careful with this as it can lead to some unintended results. Since we might have multiple different criteria we want to search for, creating a new output file each time has the potential to clutter up our workspace. We also thus far havent been interested in the actual contents of those files, only in the number of reads that weve found. We created the files to store the reads and then counted the lines in the file to see how many reads matched our criteria. Theres a way to do this, however, that doesnt require us to create these intermediate files - the pipe command (|). What | does is take the output that is scrolling by on the terminal and uses that output as input to another command. When our output was scrolling by, we might have wished we could slow it down and look at it, like we can with less. Well it turns out that we can! We can redirect our output from our grep call through the less command. $ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq | less We can now see the output from our grep call within the less interface. We can use the up and down arrows to scroll through the output and use q to exit less. If we dont want to create a file before counting lines of output from our grep search, we could directly pipe the output of the grep search to the command wc -l. This can be helpful for investigating your output if you are not sure you would like to save it to a file. $ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq | wc -l Because we asked grep for all four lines of each FASTQ record, we need to divide the output by four to get the number of sequences that match our search pattern. Since 802 / 4 = 200.5 and we are expecting an integer number of records, there is something added or missing in bad_reads.txt. If we explore bad_reads.txt using less, we might be able to notice what is causing the uneven number of lines. Luckily, this issue happens by the end of the file so we can also spot it with tail. $ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq &gt; bad_reads.txt $ tail bad_reads.txt @SRR098026.133 HWUSI-EAS1599_1:2:1:0:1978 length=35 ANNNNNNNNNTTCAGCGACTNNNNNNNNNNGTNGN +SRR098026.133 HWUSI-EAS1599_1:2:1:0:1978 length=35 #!!!!!!!!!##########!!!!!!!!!!##!#! -- -- @SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35 CNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN +SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35 #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! The fifth and six lines in the output display  which is the default action for grep to separate groups of lines matching the pattern, and indicate groups of lines which did not match the pattern so are not displayed. To fix this issue, we can redirect the output of grep to a second instance of grep as follows. $ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq | grep -v &#39;^--&#39; &gt; bad_reads.fastq tail bad_reads.fastq +SRR098026.132 HWUSI-EAS1599_1:2:1:0:320 length=35 #!!!!!!!!!##########!!!!!!!!!!##!#! @SRR098026.133 HWUSI-EAS1599_1:2:1:0:1978 length=35 ANNNNNNNNNTTCAGCGACTNNNNNNNNNNGTNGN +SRR098026.133 HWUSI-EAS1599_1:2:1:0:1978 length=35 #!!!!!!!!!##########!!!!!!!!!!##!#! @SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35 CNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN +SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35 #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! The -v option in the second grep search stands for --invert-match meaning grep will now only display the lines which do not match the searched pattern, in this case '^--'. The caret (^) is an anchoring character matching the beginning of the line, and the pattern has to be enclose by single quotes so grep does not interpret the pattern as an extended option (starting with ). Custom grep control Use man grep to read more about other options to customize the output of grep including extended options, anchoring characters, and much more. Redirecting output is often not intuitive, and can take some time to get used to. Once youre comfortable with redirection, however, youll be able to combine any number of commands to do all sorts of exciting things with your data! None of the command line programs weve been learning do anything all that impressive on their own, but when you start chaining them together, you can do some really powerful things very efficiently. 3.18 Writing for loops Loops are key to productivity improvements through automation as they allow us to execute commands repeatedly. Similar to wildcards and tab completion, using loops also reduces the amount of typing (and typing mistakes). Loops are helpful when performing operations on groups of sequencing files, such as unzipping or trimming multiple files. We will use loops for these purposes in subsequent analyses, but will cover the basics of them for now. When the shell sees the keyword for, it knows to repeat a command (or group of commands) once for each item in a list. Each time the loop runs (called an iteration), an item in the list is assigned in sequence to the variable, and the commands inside the loop are executed, before moving on to the next item in the list. Inside the loop, we call for the variables value by putting $ in front of it. The $ tells the shell interpreter to treat the variable as a variable name and substitute its value in its place, rather than treat it as text or an external command. In shell programming, this is usually called expanding the variable. Sometimes, we want to expand a variable without any whitespace to its right. Suppose we have a variable named foo that contains the text abc, and would like to expand foo to create the text abcEFG. $ foo=abc $ echo foo is $foo foo is abc $ echo foo is $fooEFG # doesn&#39;t work foo is The interpreter is trying to expand a variable named fooEFG, which (probably) doesnt exist. We can avoid this problem by enclosing the variable name in braces ({ and }, sometimes called squiggle braces). bash treats the # character as a comment character. Any text on a line after a # is ignored by bash when evaluating the text as code. $ foo=abc $ echo foo is $foo foo is abc $ echo foo is ${foo}EFG # now it works! foo is abcEFG Lets write a for loop to show us the first two lines of the fastq files we downloaded earlier. You will notice the shell prompt changes from $ to &gt; and back again as we were typing in our loop. The second prompt, &gt;, is different to remind us that we havent finished typing a complete command yet. A semicolon, ;, can be used to separate two commands written on a single line. $ cd ~/MarineGenomics/week2/untrimmed_fastq $ for filename in *.fastq &gt; do &gt; head -n 2 ${filename} &gt; done The for loop begins with the formula for &lt;variable&gt; in &lt;group to iterate over&gt;. In this case, the word filename is designated as the variable to be used over each iteration. In our case SRR097977.fastq and SRR098026.fastq will be substituted for filename because they fit the pattern of ending with .fastq in the directory weve specified. The next line of the for loop is do. The next line is the code that we want to execute. We are telling the loop to print the first two lines of each variable we iterate over. Finally, the word done ends the loop. After executing the loop, you should see the first two lines of both fastq files printed to the terminal. Lets create a loop that will save this information to a file. $ for filename in *.fastq &gt; do &gt; head -n 2 ${filename} &gt;&gt; seq_info.txt &gt; done When writing a loop, you will not be able to return to previous lines once you have pressed Enter. Remember that we can cancel the current command using Ctrl+C If you notice a mistake that is going to prevent your loop for executing correctly. Note that we are using &gt;&gt; to append the text to our seq_info.txt file. If we used &gt;, the seq_info.txt file would be rewritten every time the loop iterates, so it would only have text from the last variable used. Instead, &gt;&gt; adds to the end of the file. 3.19 Using Basename in for loops Basename is a function in UNIX that is helpful for removing a uniform part of a name from a list of files. In this case, we will use basename to remove the .fastq extension from the files that weve been working with. $ basename SRR097977.fastq .fastq We see that this returns just the SRR accession, and no longer has the .fastq file extension on it. SRR097977 If we try the same thing but use .fasta as the file extension instead, nothing happens. This is because basename only works when it exactly matches a string in the file. $ basename SRR097977.fastq .fasta SRR097977.fastq Basename is really powerful when used in a for loop. It allows to access just the file prefix, which you can use to name things. Lets try this. Inside our for loop, we create a new name variable. We call the basename function inside the parenthesis, then give our variable name from the for loop, in this case ${filename}, and finally state that .fastq should be removed from the file name. Its important to note that were not changing the actual files, were creating a new variable called name. The line &gt; echo $name will print to the terminal the variable name each time the for loop runs. Because we are iterating over two files, we expect to see two lines of output. $ for filename in *.fastq &gt; do &gt; name=$(basename ${filename} .fastq) &gt; echo ${name} &gt; done Exercise 3.20 Exercise Print the file prefix of all of the .txt files in our current directory. Solution $ for filename in *.txt &gt; do &gt; name=$(basename ${filename} .txt) &gt; echo ${name} &gt; done One way this is really useful is to move files. Lets rename all of our .txt files using mv so that they have the years on them, which will document when we created them. $ for filename in *.txt &gt; do &gt; name=$(basename ${filename} .txt) &gt; mv ${filename} ${name}_2021.txt &gt; done Exercise 3.21 Exercise Remove _2021 from all of the .txt files. Solution $ for filename in *_2021.txt &gt; do &gt; name=$(basename ${filename} _2021.txt) &gt; mv ${filename} ${name}.txt &gt; done 3.22 Writing Scripts and Working with Data Questions: How can we automate a commonly used set of commands? Objectives: Use the nano text editor to modify text files. Write a basic shell script. Use the bash command to execute a shell script. Use chmod to make a script an executable program. Keypoints: Scripts are a collection of commands executed together. Transferring information to and from virtual and local computers. 3.23 Writing files Weve been able to do a lot of work with files that already exist, but what if we want to write our own files? Were not going to type in a FASTA file, but well see as we go through other tutorials, there are a lot of reasons well want to write a file, or edit an existing file. To add text to files, were going to use a text editor called Nano. Were going to create a file to take notes about what weve been doing with the data files in ~/MarineGenomics/week2/untrimmed_fastq. This is good practice when working in bioinformatics. We can create a file called README.txt that describes the data files in the directory or documents how the files in that directory were generated. As the name suggests, its a file that we or others should read to understand the information in that directory. Lets change our working directory to ~/MarineGenomics/week2/untrimmed_fastq using cd, then run nano to create a file called README.txt: $ cd ~/MarineGenomics/week2/untrimmed_fastq $ nano README.txt You should see something like this: nano201711.png The text at the bottom of the screen shows the keyboard shortcuts for performing various tasks in nano. We will talk more about how to interpret this information soon. Which Editor? Which Editor? When we say, nano is a text editor, we really do mean text: it can only work with plain character data, not tables, images, or any other human-friendly media. We use it in examples because it is one of the least complex text editors. However, because of this trait, it may not be powerful enough or flexible enough for the work you need to do after this workshop. On Unix systems (such as Linux and Mac OS X), many programmers use Emacs or Vim (both of which require more time to learn), or a graphical editor such as Gedit. On Windows, you may wish to use Notepad++. Windows also has a built-in editor called notepad that can be run from the command line in the same way as nano for the purposes of this lesson. No matter what editor you use, you will need to know where it searches for and saves files. If you start it from the shell, it will (probably) use your current working directory as its default location. If you use your computers start menu, it may want to save files in your desktop or documents directory instead. You can change this by navigating to another directory the first time you Save As Lets type in a few lines of text. Describe what the files in this directory are or what youve been doing with them. Once were happy with our text, we can press Ctrl-O (press the Ctrl or Control key and, while holding it down, press the O key) to write our data to disk. Youll be asked what file we want to save this to: press Return to accept the suggested default of README.txt. Once our file is saved, we can use Ctrl-X to quit the editor and return to the shell. Control, Ctrl, or ^ Key The Control key is also called the Ctrl key. There are various ways in which using the Control key may be described. For example, you may see an instruction to press the Ctrl key and, while holding it down, press the X key, described as any of: Control-X Control+X Ctrl-X Ctrl+X ^X C-x In nano, along the bottom of the screen youll see ^G Get Help ^O WriteOut. This means that you can use Ctrl-G to get help and Ctrl-O to save your file. Now youve written a file. You can take a look at it with less or cat, or open it up again and edit it with nano. Exercise 3.24 Exercise Open README.txt and add the date to the top of the file and save the file. Solution Use nano README.txt to open the file. Add todays date and then use Ctrl-X followed by y and Enter to save. 3.25 Writing scripts A really powerful thing about the command line is that you can write scripts. Scripts let you save commands to run them and also lets you put multiple commands together. Though writing scripts may require an additional time investment initially, this can save you time as you run them repeatedly. Scripts can also address the challenge of reproducibility: if you need to repeat an analysis, you retain a record of your command history within the script. One thing we will commonly want to do with sequencing results is pull out bad reads and write them to a file to see if we can figure out whats going on with them. Were going to look for reads with long sequences of Ns like we did before, but now were going to write a script, so we can run it each time we get new sequences, rather than type the code in by hand each time. Were going to create a new file to put this command in. Well call it bad-reads-script.sh. The sh isnt required, but using that extension tells us that its a shell script. $ nano bad-reads-script.sh Bad reads have a lot of Ns, so were going to look for NNNNNNNNNN with grep. We want the whole FASTQ record, so were also going to get the one line above the sequence and the two lines below. We also want to look in all the files that end with .fastq, so were going to use the * wildcard. grep -B1 -A2 -h NNNNNNNNNN *.fastq | grep -v &#39;^--&#39; &gt; scripted_bad_reads.txt Custom grep control We introduced the -v option in the previous episode, now we are using -h to Suppress the prefixing of file names on output according to the documentation shown by man grep. Type your grep command into the file and save it as before. Be careful that you did not add the $ at the beginning of the line. Now comes the neat part. We can run this script. Type: $ bash bad-reads-script.sh It will look like nothing happened, but now if you look at scripted_bad_reads.txt, you can see that there are now reads in the file. 3.26 Exercise We want the script to tell us when its done. 1. Open bad-reads-script.sh and add the line echo \"Script finished!\" after the grep command and save the file. 2. Run the updated script. Solution $ bash bad-reads-script.sh Script finished! 3.27 Making the script into a program We had to type bash because we needed to tell the computer what program to use to run this script. Instead, we can turn this script into its own program. We need to tell it that its a program by making it executable. We can do this by changing the file permissions. We talked about permissions in an earlier episode. First, lets look at the current permissions. $ ls -l bad-reads-script.sh -rw-rw-r-- 1 margeno margeno 75 Apr 8 12:46 bad-reads-script.sh We see that it says -rw-r--r--. This shows that the file can be read by any user and written to by the file owner (you). We want to change these permissions so that the file can be executed as a program using ./ . We use the command chmod like we did earlier when we removed write permissions. Here we are adding (+) executable permissions (+x). $ chmod +x bad-reads-script.sh Now lets look at the permissions again. $ ls -l bad-reads-script.sh -rwxrwxr-x 1 margeno margeno 75 Apr 8 12:48 bad-reads-script.sh Now we see that it says -rwxr-xr-x. The xs that are there now tell us we can run it as a program. So, lets try it! Well need to put ./ at the beginning so the computer knows to look here in this directory for the program. $ ./bad-reads-script.sh The script should run the same way as before, but now weve created our very own computer program! 3.28 Creature of the Week! The Frilled shark! "],["week3-awk-and-how-to-download-files.html", "Chapter 4 Week3: Awk and how to download files 4.1 AWK 4.2 Moving and Downloading Data 4.3 Getting data from the cloud 4.4 Downloading files from Github 4.5 Final bash wrap-up", " Chapter 4 Week3: Awk and how to download files For this week, well continue to use the data that you downloaded last week. If you need to download it again please use the wget link below to download the tar file. cd /home/margeno/ wget https://raw.githubusercontent.com/BayLab/MarineGenomicsData/main/week2.tar.gz use tar to uncompress and unzip the file tar -xzvf week2.tar.gz This will create a week2 directory in your MarineGenomics directory (it will also create the MarineGenomics directory if you dont already have one). 4.1 AWK Awk is a fast and versatile pattern matching programming language. Awk can do the same tasks that sed, grep, cat, and wc; and then it can do a lot more https://www.gnu.org/software/gawk/manual/gawk.html. This program deserves a full class to go into details, so instead we just have this section to make you aware that the program exists. Lets see how awk can behave like wc. $ cd /home/margeno/MarineGenomics/week2/ $ ls TableS2_QTL_Bay_2017.txt sra_metadata untrimmed_fastq This table is from the Bay et al. 2017 publication ~/MarineGenomics/week2/TableS2_QTL_Bay_2017.txt and we will use it as our example file for this section. We can look inside the file by using cat or awk $ awk &#39;{print $0}&#39; TableS2_QTL_Bay_2017.txt The instructions are enclosed in single quotes This command has the same output of cat: it prints each line from the example file TableS2_QTL_Bay_2017.txt The structure of the instruction is the following: - curly braces surround the set of instructions - print is the instruction that sends its arguments to the terminal - $0 is a variable, it means the content of the current line As you can see, the file contains a table. Trait n LOD Chr Position (cM) Nearest SNP mate choice 200 4.5 14 22.43 chrXIV:1713227 mate choice 200 4.61 21 8 chrXXI:9373717 discriminant function 200 4.83 12 17 chrXII:7504339 discriminant function 200 4.23 14 8.1 chrXIV:4632223 PC2 200 4.04 4 30.76 chrIV:11367975 PC2 200 6.67 7 47 chrVII:26448674 centroid size 200 6.97 9 47.8 chrIX:19745222 x2* 200 3.93 7 60 chrUn:29400087 y2* 200 9.99 4 32 chrIV:11367975 x3 200 4.45 1 32.3 chrI:15145305 x4 200 5.13 16 30.9 chrXVI:12111717 x5* 200 4.54 15 6 chrXV:505537 y5 200 4.21 4 24.9 chrIV:15721538 x6 200 3.96 16 29.5 chrXVI:13588796 y6* 200 4.14 9 30.2 chrIX:18942598 y15* 200 5.3 2 27 chrII:19324477 x16 200 5.49 7 60 chrUn:29400087 x17 200 4.92 1 32.8 chrI:14261764 Table S2. Significant QTL loci for mate choice and morphology Now lets use awk to count the lines of a file, similarly to what wc -l would do. As you probably remember, -l is an option that asks for the number of lines only. However, wc counts the number of newlines in the file, if the last line does not contain a carriage return (i.e. there is no emptyline at the end of the file), the result is going be the actual number of lines minus one. $ wc -l TableS2_QTL_Bay_2017.txt 19 TableS2_QTL_Bay_2017.txt A workaround is to use awk. Awk is command line program that takes as input a set of instructions and one or more files. The instructions are executed on each line of the input file(s). $ awk &#39;{print NR;}&#39; TableS2_QTL_Bay_2017.txt | tail -1 Awk can also search within a file like grep can. Lets see if there are any significant QTL loci in the chromosome chrXIV $ awk &#39;/chrXIV/&#39; TableS2_QTL_Bay_2017.txt This chromosome had two significant QTL Loci for mate choice and morphology. When to use awk? for search and replacement of large files (its fast!) when manipulating multiple large files 4.2 Moving and Downloading Data Below well show you some commands to download data onto your instance, or to move data between your computer and the cloud. 4.3 Getting data from the cloud There are two programs that will download data from a remote server to your local (or remote) machine: wget and curl. They were designed to do slightly different tasks by default, so youll need to give the programs somewhat different options to get the same behaviour, but they are mostly interchangeable. wget is short for world wide web get, and its basic function is to download web pages or data at a web address. cURL is a pun, it is supposed to be read as see URL, so its basic function is to display webpages or data at a web address. Which one you need to use mostly depends on your operating system, as most computers will only have one or the other installed by default. Today we will use wget to download some data from Ensembl. Exercise Before we can start our download, we need to know whether were using curl or wget. To see which program you have, type: $ which curl $ which wget which is a BASH program that looks through everything you have installed, and tells you what folder it is installed to. If it cant find the program you asked for, it returns nothing, i.e. gives you no results. On Mac OSX, youll likely get the following output: $ which wget $ /usr/bin/wget Once you know whether you have curl or wget, use one of the following commands to download the file: $ cd $ wget ftp://ftp.ensemblgenomes.org/pub/release-37/bacteria/species_EnsemblBacteria.txt Lets see if the file from ensembl downloaded ls species_EnsemblBacteria.txt it did! 4.4 Downloading files from Github Github is a useful place to store data files and scripts and it is widely used by researchers in many different fields, including genomics. There are a few useful tricks to understanding how to best transfer files from github to your own terminal. There are two main ways to transfer files from github: + Use git clone to download an entire repository (Directory) + use wget to download a single file If youre interested in getting a repository and all of its contents you can use git clone. This can be useful if youre interested in using data files and the scripts that come with them. First navigate to your home directory with cd (leaving it blank takes you to your home automatically). And then use git clone to download the repository reallycoolrepo cd git clone https://github.com/SerenaCaplins/reallycoolrepo.git This should make a new directory called reallycoolrepo. Lets ls in this directory to see whats in it. ls reallycoolrepo/ files forloop.sh MarineGenomics.txt README.md We have three files and one directory here. You can view the MarineGenomics.txt file with cat cat reallycoolrepo/MarineGenomics.txt __ __ _ _____ _ | \\/ | (_) / ____| (_) | \\ / | __ _ _ __ _ _ __ ___ | | __ ___ _ __ ___ _ __ ___ _ ___ ___ | |\\/| | / _` | | &#39;__| | | | &#39;_ \\ / _ \\ | | |_ | / _ \\ | &#39;_ \\ / _ \\ | &#39;_ ` _ \\ | | / __| / __| | | | | | (_| | | | | | | | | | | __/ | |__| | | __/ | | | | | (_) | | | | | | | | | | (__ \\__ \\ |_| |_| \\__,_| |_| |_| |_| |_| \\___| \\_____| \\___| |_| |_| \\___/ |_| |_| |_| |_| \\___| |___/ Pretty cool huh? Using git clone to get an entire repository can be useful, but often were just interested in getting a single file. Weve already learned how to get files using wget, but this isnt as straightforward on git hub. To illustrate when it doesnt work lets navigate to a repository where theres a file that were interested in: copy and paste this link into your browser: https://github.com/BayLab/MarineGenomicsData This is the repository where we have been storing all of the data for the class. We typically download a single tar file each week instead of cloning the whole repository all at once (this allows us to make changes to each week without having to download the whole repo every week, which would also override your files). Say you wanted to get the week10.tar.gz file If you click on the file you can copy the file path from your browser. A few ways to do this but perhaps easiest is to click the file and copy the path that shows up in your browser. Week3_gitpath.jpg https://github.com/BayLab/MarineGenomicsData/blob/main/week10.tar.gz Seems fine right? Lets use wget to try and import this into our home directory. wget https://github.com/BayLab/MarineGenomicsData/blob/main/week10.tar.gz Now lets try and untar it tar -xvzf week10.tar.gz This prints an error message: gzip: stdin: not in gzip format tar: Child returned status 1 tar: Error is not recoverable: exiting now What seems to have gone wrong. We get a clue if we use less to view the file (you normally wouldnt use less to view to a tar.gz file, but in this case it will tell us something useful). Useful tip: less does work on .gz files! less week10.tar.gz You will see something like this: &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot; data-color-mode=&quot;auto&quot; data-light-theme=&quot;light&quot; data-dark-theme=&quot;dark&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://github.githubassets.com&quot;&gt; &lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://avatars.githubusercontent.com&quot;&gt; &lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://github-cloud.s3.amazonaws.com&quot;&gt; &lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://user-images.githubusercontent.com/&quot;&gt; &lt;link rel=&quot;preconnect&quot; href=&quot;https://github.githubassets.com&quot; crossorigin&gt; &lt;link rel=&quot;preconnect&quot; href=&quot;https://avatars.githubusercontent.com&quot;&gt; &lt;link crossorigin=&quot;anonymous&quot; media=&quot;all&quot; integrity=&quot;sha512-Xvl7qd6ZFq6aBrViMpY+7UKRL79QzxxYG1kyELGe/sH4sV3eCks8DDXxa3WolACcKPac42eqrfe6m0jazyAIPQ==&quot; rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/frameworks-5ef97ba9de9916ae9a06b56232963eed.css&quot; /&gt; &lt;link crossorigin=&quot;anonymous&quot; media=&quot;all&quot; integrity=&quot;sha512-24GJDHWJro3USSMV5JFy5QbE8eCNYG61UucNp7vJMTaeJMrBy6FLiLFgX9jXnWlddv2VRu/rTLIkxzuRDF9ZVA==&quot; rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/colors-v2-db81890c7589ae8dd4492315e49172e5.css&quot; /&gt; &lt;link crossorigin=&quot;anonymous&quot; media=&quot;all&quot; integrity=&quot;sha512-rcBopHrwspQORpXVLihZMP22sFwuIo3fL1DyFo5aXwWnV5FzV/nlAGnX/36fI9GQVc2VN7MiIT34RMCwq8jemg==&quot; rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/behaviors-adc068a47af0b2940e4695d52e285930.css&quot; /&gt; This is not what should be in the file. Were seeing html coding like what you would see for a website. The reason for this is because the link we got from github was to the html page showing the file, not the location of the actual file itself. Lets remove this week10.tar.gz file rm week10.tar.gz So all of the repositories are encoded as html files to make the github website, we need to get the actual file path of the file itself to use wget. You can do this by copying the raw file path, which you will find by clicking view raw or by using control-c or right clicking and selecting copy link address (for pc users) the download tab. Week3_rawgitpath.jpg Lets try this again with our new link. It should say the word raw somewhere in the file path wget https://github.com/BayLab/MarineGenomicsData/raw/main/week10.tar.gz Now untar it tar -xzvf week10.tar.gz You should see something like this, which tells us that it worked!! MarineGenomicsData/Week10/ MarineGenomicsData/Week10/candidate_fastas.fa You can remove this as we wont be using it later in the course rm -r MarineGenomicsData So we need to find that raw file path to use wget on any single file that we want in git hub. 4.5 Final bash wrap-up Weve covered a lot of ground so far in the last 2 and a half weeks! Its a good time to review the commands weve learned and the skills were starting to develop. In week 1, we showed you: how to access jetstream a cloud computing resourse how to navigate the terminal with bash/UNIX commands such as ls, cd,mv,mkdir, andcp` the differnce between full and relative file paths: ++ full path example: /home/margeno/MarineGenomics/week2/README.txt ++ relative path from the MarineGenomics directroy: week2/README.txt how to use Tab to autofill commands and file paths the man command to see full parameters for bash commands In week 2, we covered: how to view files using less, cat, head, tail how to view and modify file and directory permissions using chmod how to use wildcards like * to view directory contents to oh so cautiously use rm to permanently delete a file use grep to search a file and &gt;&gt; to append search results to a new file how to write a script using a text editor nano in our case executing a script from a saved file with bash or by making it an executable program with chmod writing for loops Finally in week3, we learned how to use Awk to edit the contents of a file how to move and download data At this point if you havent already its a good time to make a cheat sheet of the commands weve learned to keep by your computer so you can reference them at anytime. There are several very good bash/Unix cheat sheets available online. Here are links to a few of them: https://cheatography.com/gregcheater/cheat-sheets/bash/ https://cheatography.com/davechild/cheat-sheets/linux-command-line/ https://www.loggly.com/blog/the-essential-cheat-sheet-for-linux-admins/?utm_source=LinkInPDF&amp;utm_medium=social-media&amp;utm_campaign=SocialPush "],["week-4--what-is-a-genetic-variant.html", "Chapter 5 Week 4- What is a Genetic Variant? 5.1 To get started lets download the data and install a few programs 5.2 Raw read quality control 5.3 Trimming to remove adapters 5.4 Building an index of our genome 5.5 Map reads to the genome 5.6 sam to bam file conversion 5.7 Genotype likelihoods 5.8 Creature of the Week!", " Chapter 5 Week 4- What is a Genetic Variant? Youll find the lecture discussing the definition and identification of genetic variation here Well be working on the terminal in jetstream for the entirety of this lesson. 5.1 To get started lets download the data and install a few programs Download the data from the MarineGenomicsData repository on git hub. Well be working in the Week_3 folder wget https://raw.githubusercontent.com/BayLab/MarineGenomicsData/main/week4tar.gz Uncompress the file using tar: tar -xzvf week4.tar.gz Next we need to install a few programs that will allow us to do what we need to do. This will all take a few minutes! *The programs that we are installing + samtools: allows us to filter and view our mapped data + bowtie2: to map our reads to the reference genome + cutadapt: will trim adaptor sequences from the reads + fastqc: used to view the quality of the read files sudo apt-get -y update &amp;&amp; \\ sudo apt-get -y install samtools bowtie2 cutadapt fastqc And one more program that well install separately. This is angsd which we will use to find variants in our data. The first command navigates you to your home directory. cd git clone --recursive https://github.com/samtools/htslib.git git clone https://github.com/ANGSD/angsd.git cd htslib;make;cd ../angsd ;make HTSSRC=../htslib Now were ready to get going. The first thing well do is have a look at our data and directories to make sure we know where everything is. $ ls Change directories to the one that has the data MarineGenomicsData/Week4. If you ls into this directory you should see 6 files with a .fastq.gz extension and 1 tiny genome file with a .fna.gz extension. 5.2 Raw read quality control Next lets use the program fastqc to check the quality of our data files $ fastqc SRR6805880.tiny.fastq.gz Readout will say: Started analysis for SRR6805880.tiny.fastq.gz Analysis complete for SRR6805880.tiny.fastq.gz Lets look to see that it worked $ ls Ppar_tinygenome.fna.gz SRR6805880.tiny_fastqc.zip SRR6805883.tiny.fastq.gz SRR6805880.tiny.fastq.gz SRR6805881.tiny.fastq.gz SRR6805884.tiny.fastq.gz SRR6805880.tiny_fastqc.html SRR6805882.tiny.fastq.gz SRR6805885.tiny.fastq.gz Looks good! Fastqc generated two outputs for us, a .html and a .zip directory Lets run fastqc on the remaining files, and then well take a look at the output. You may have noticed fastqc just used the same file name to produce our output with different extensions. We can take advantage of that by running fastqc on all our datafiles with the wildcard *. $ fastqc SRR680588* Youll see you initially get an error message because fastqc doesnt see the .fastq file extension on some of our files. It simply skips these and moves on the the next file. To view the output of fastqc, well minimize our terminal and look at our Home folder on our jetstream desktop. This is the same home directory that weve been working in through the terminal. Go to the directory where you were running fastqc and find an .html file. Double click it and it should open a web browser with the output data. Well go over how to interpret this file in class. 5.3 Trimming to remove adapters There are many programs to trim sequence files. Well use the same paper that was used in the Xuereb et al. 2018 paper [here]. Cutadapt is relatively easy to run with the code below, once we have identified our adaptor sequence and takes the general form below. $ cutadapt -g SEQUENCETOTRIM -o name_of_input_file name_of_output_file Lets do this on one of our files to test it out. cutadapt -g TGCAG SRR6805880.tiny.fastq.gz -o SRR6805880.tiny_trimmed.fastq.gz This works for a single file, but if we want to do it for all our read files we need to either do them all individually (slow and error prone) or use a for loop. for filename in *.tiny.fastq.gz do base=$(basename $filename .tiny.fastq.gz) echo ${base} cutadapt -g TGCAG ${base}.tiny.fastq.gz -o ${base}.tiny_trimmed.fastq.gz done Yay! You should see a little report for each of these files that showing how many reads were trimmed and some other info (how long are the reads, etc) You can check if the trimmed files are there with: ls *trimmed* Our reads are now ready to be mapped to the genome. 5.4 Building an index of our genome First we have to index our genome. Well do that with the bowtie2-build command. This will generate a lot of files that describe different aspects of our genome We give bowtie2-build two things, the name of our genome, and a general name to label the output files. I always keep the name of the output files the same as the original genome file (without the .fna.gz extension) to avoid confusion (whats this file for?). bowtie2-build Ppar_tinygenome.fna.gz Ppar_tinygenome This should produce several output files with extensions including: .bt2 and rev.1.bt2 etc (six files in total) 5.5 Map reads to the genome Lets map those reads using a for loop for filename in *.tiny_trimmed.fastq.gz do base=$(basename $filename .tiny_trimmed.fastq.gz) echo ${base} bowtie2 -x Ppar_tinygenome -U ${base}.tiny_trimmed.fastq.gz -S ${base}.sam done You should see a bunch of text telling you all about how well our reads mapped to the genome. For this example were getting a low percentage (20-30%) because of how the genome and reads were subset for this exercise. The full genome and full read files have a much higher mapping rate (70-80%) than our subset. Youll also notice that we have made a bunch of .sam files. THis stands for Sequence Alignment Map file. Lets use less to look at one of these files using less There are several columns of data in a sam file 5.6 sam to bam file conversion The next step is to convert our sam file to a bam (Binary Alignment Map file). This gets our file ready to be read by angsd the program were going to use to call SNPs. for filename in *.sam do base=$(basename $filename .sam) echo ${base} samtools view -bhS ${base}.sam | samtools sort -o ${base}.bam done 5.7 Genotype likelihoods There are many ways and many programs that call genotypes. The program that we will use calculates genotype likelihoods, which account for uncertainty due to sequencing errors and/or mapping errors and is one of several programs in the package ANGSD. The purpose of this class is not to discuss which program is the best, but to teach you to use some commonly used programs. angsd needs a text file with the .bam file names listed. We can make that by running the command below ls *.bam &gt; bam.filelist Look at the list: cat bam.filelist Run the following code to calculate genotype likelihoods ../../angsd/angsd -bam bam.filelist -GL 1 -out genotype_likelihoods -doMaf 2 -SNP_pval 1e-2 -doMajorMinor 1 This will generate two files, one with a .arg extension, this has a record of the script we ran to generate the output, and a .maf file that will give you the minor allele frequencies and is the main output file. If you see these two files, Yay!! We did it! Suggested Exercises For our coding session you can re-run through the above code as it is written. You can also do the below suggestions to extend or modify what we did in Tuesdays class. A possible answer is located beneath each activity, but its possible you will correctly perform the suggestion in a different way. Run fastqc on our .trimmed reads and compare the html with the untrimmed files. Solution We should no longer see the red error flag for the per base sequence quality or base pairs conten. code: fastqc *trimmed.fastq.gz map the untrimmed files to the genome. How do the alignments compare? Solution As a for loop: for filename in *tiny.fastq.gz; do; base=$(basename $filename .tiny.fastq.gz); echo=${base}; bowtie2 -x Ppar_tinygenome.fna.gz -U ${base}.tiny.fastq.gz -S ${base}.nottrimmed.sam; done Run the mapping for loop as a shell script using bash (i.e., store the for loop in a text editor (NANOs or other) and execute the .sh script with bash) Solution this can be done by copying and pasting the for loop in a text editor that you save as for example map_samples_bowtie2.sh. This script is then executed by bash map_samples_bowtie2.sh use cutadapt to trim the sequences to 70 bp like they did in the Xuereb et al. 2018 paper. Write the output of cutadapt to an .70bp.trimmed.fastq.gz and then map these 70bp, trimmed reads to the genome. How do they compare to our .trimmed reads? Solution to find the parameter for maximum read length in cutadapt: cutadapt - help There are a few ways to do this. cutadapt -g TGCAG ${base}.tiny.fastq.gz -u 70 -o ${base}.tiny_70bp_trimmed.fastq.gz change the parameters of the angsd genotype likelihoods command. How many more/less SNPs do we recover if we lower or raise the SNP p-value? To see what the other parameters do run `../../angsd/angsd -h Solution If we remove the -SNP_pval command entirely we get ~72000 sites retained! Wow! That seems like a lot given our ~20% maping rate. If you instead increase the p-value threshold to 1e-3 we find 3 SNPs. 5.8 Creature of the Week! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
